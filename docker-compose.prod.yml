version: "3.8"

services:
  # Backend API Service (Production)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: user-management-backend-prod
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_CONNECTION=mysql
      - DB_HOST=database
      - DB_PORT=3306
      - DB_DATABASE=user_management_prod
      - DB_USERNAME=user_management_prod
      - DB_PASSWORD=${DB_PASSWORD}
      - MAIL_MAILER=smtp
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - FRONTEND_URL=${FRONTEND_URL}
      - SANCTUM_STATEFUL_DOMAINS=${SANCTUM_STATEFUL_DOMAINS}
    volumes:
      - backend_storage:/var/www/html/storage
      - backend_logs:/var/www/html/storage/logs
    depends_on:
      - database
      - redis
    networks:
      - user-management-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Service (Production)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: user-management-frontend-prod
    environment:
      - NODE_ENV=production
      - NUXT_PUBLIC_API_BASE=${API_BASE_URL}
      - NUXT_PUBLIC_FRONTEND_URL=${FRONTEND_URL}
      - NUXT_DEVTOOLS_ENABLED=false
      - NUXT_PUBLIC_ENABLE_DEBUG_LOGGING=false
    depends_on:
      - backend
    networks:
      - user-management-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:3000/api/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database Service (Production)
  database:
    image: mysql:8.0
    container_name: user-management-database-prod
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: user_management_prod
      MYSQL_USER: user_management_prod
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - mysql_data_prod:/var/lib/mysql
      - ./database/backups:/backups
    networks:
      - user-management-network
    restart: unless-stopped
    command: >
      --default-authentication-plugin=mysql_native_password
      --innodb-buffer-pool-size=256M
      --max-connections=100
      --query-cache-type=1
      --query-cache-size=64M
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-p${DB_ROOT_PASSWORD}",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Service (Production)
  redis:
    image: redis:7-alpine
    container_name: user-management-redis-prod
    volumes:
      - redis_data_prod:/data
    networks:
      - user-management-network
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: user-management-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/ssl/certs:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - user-management-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database Backup Service
  backup:
    image: mysql:8.0
    container_name: user-management-backup
    environment:
      MYSQL_HOST: database
      MYSQL_USER: root
      MYSQL_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: user_management_prod
    volumes:
      - ./database/backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    depends_on:
      - database
    networks:
      - user-management-network
    restart: "no"
    command: /bin/bash -c "chmod +x /backup.sh && /backup.sh"

volumes:
  mysql_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  backend_storage:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  user-management-network:
    driver: bridge
